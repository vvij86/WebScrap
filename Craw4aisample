import asyncio
from crawl4ai import AsyncWebCrawler, BrowserConfig, CrawlerRunConfig, CacheMode
from crawl4ai.markdown_generation_strategy import DefaultMarkdownGenerator
from crawl4ai.content_filter_strategy import LLMContentFilter

async def main():
    # Configure the browser with a 10-minute timeout
    browser_config = BrowserConfig(
        headless=True,
        verbose=True,
        timeout=600  # seconds
    )
    
    # Create a run configuration with a custom markdown generator that uses the LLMContentFilter.
    # Here we specify the Azure OpenAI parameters for the O3 Mini model.
    run_config = CrawlerRunConfig(
        markdown_generator=DefaultMarkdownGenerator(
            content_filter=LLMContentFilter(
                instruction="Extract the news article content in a concise and clear manner, including only the main text, all image URLs, and all hyperlinks present on the page.",
                provider="azure/openai",
                api_key="YOUR_API_KEY",            # Replace with your Azure OpenAI API key
                endpoint="YOUR_ENDPOINT",          # e.g., "https://your-resource-name.openai.azure.com/"
                model="o3-mini",                   # Specify the model name
                api_version="YOUR_API_VERSION"     # e.g., "2023-03-15-preview"
            )
        ),
        cache_mode=CacheMode.BYPASS,
        wait_until="networkidle"  # Wait until network activity subsides
    )

    async with AsyncWebCrawler(config=browser_config) as crawler:
        # Replace with the actual news page URL
        result = await crawler.arun(
            url="https://example.com/news",
            config=run_config,
            magic=True  # Enables additional heuristics if needed
        )
        # Print the results: Markdown content, image URLs, and links.
        print("Extracted Markdown:")
        print(result.markdown)
        print("\nExtracted Image URLs:")
        print(result.media.get('images', []))
        print("\nExtracted Links:")
        print(result.links)

if __name__ == "__main__":
    asyncio.run(main())
